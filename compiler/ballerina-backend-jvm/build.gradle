/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
 
apply from: "$rootDir/gradle/javaProjectWithExtBalo.gradle"

configurations {
    baloOldImpl
    baloImplementation
    genBalo
}

dependencies {
    implementation project(':ballerina-lang')
    implementation project(':ballerina-core')
    implementation project(':ballerina-bir')

    baloOldImpl project(path: ':ballerina-bootstrapper', configuration: 'balPack')

    //transitive
    baloImplementation project(path: ':ballerina-encoding', configuration: 'baloImplementation')
    baloImplementation project(path: ':ballerina-internal', configuration: 'baloImplementation')
    baloImplementation project(path: ':ballerina-time', configuration: 'baloImplementation')
}

task ballerinaInit(type: Exec) {
    dependsOn(':ballerina-bootstrapper:assemble')
    workingDir "$buildDir/../src/main/ballerina"
    configurations.baloOldImpl.each {
        commandLine 'sh', it.path + '/bin/ballerina', 'init'
    }
}

task createBalx(type: Exec, dependsOn: ballerinaInit) {
    dependsOn(':ballerina-bir:assemble')
    dependsOn(':ballerina-jvm:assemble')
    workingDir "$buildDir/../src/main/ballerina"
    configurations.baloOldImpl.each {
        commandLine 'sh', it.path + '/bin/ballerina', 'build', '--skiptests', 'compiler_backend_jvm'
    }
}

task copyBalx(type: Copy, dependsOn: createBalx) {
    from "$buildDir/../src/main/ballerina/target/compiler_backend_jvm.balx"
    into "$buildDir/generated-balx/"
}

task createCorrectFolderStructure(type: Copy, dependsOn: copyBalx) {
    configurations.baloOldImpl.each {
        from file("$buildDir/../src/main/ballerina/.ballerina/repo/ballerina/compiler_backend_jvm/compiler_backend_jvm.zip")
        into "$buildDir/generated-balo/repo/ballerina/compiler_backend_jvm/0.0.0"
    }
}

task copyBaloToPack(type: Copy, dependsOn: createCorrectFolderStructure) {
    configurations.baloOldImpl.each {
        from file("$buildDir/generated-balo/repo/ballerina")
        into it.path + '/lib/repo/ballerina'
    }
}

task copyBalxToPack(type: Copy, dependsOn: copyBaloToPack) {
    configurations.baloOldImpl.each {
        from file("$buildDir/generated-balx")
        into it.path + '/bin'
    }
}

task copyNativesToPack(type: Copy, dependsOn: copyBalxToPack) {
    configurations.baloOldImpl.each {
        from "$buildDir/libs/"
        into it.path + '/bre/lib'
    }
}

assemble.dependsOn copyNativesToPack

jar {
  from ("$buildDir/generated-balx") {
      into "META-INF/ballerina"
  }
  dependsOn copyBalx
}

artifacts.add('genBalo', file("$buildDir/generated-balo/")) {
    builtBy('copyNativesToPack')
}
