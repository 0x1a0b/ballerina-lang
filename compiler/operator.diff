diff --git a/compiler/ballerina-backend-jvm/src/main/ballerina/compiler_backend_jvm/jvm_cast_gen.bal b/compiler/ballerina-backend-jvm/src/main/ballerina/compiler_backend_jvm/jvm_cast_gen.bal
index 289485b..9ed20ac 100644
--- a/compiler/ballerina-backend-jvm/src/main/ballerina/compiler_backend_jvm/jvm_cast_gen.bal
+++ b/compiler/ballerina-backend-jvm/src/main/ballerina/compiler_backend_jvm/jvm_cast_gen.bal
@@ -55,12 +55,6 @@ function generateCheckCast(jvm:MethodVisitor mv, bir:BType sourceType, bir:BType
     } else if (sourceType is bir:BXMLType && targetType is bir:BMapType) {
         generateXMLToAttributesMap(mv, sourceType);
         return;
-    } else if (targetType is bir:BTableType) {
-        checkCast(mv, targetType);
-        return;
-    } else if (targetType is bir:BStreamType) {
-        checkCast(mv, targetType);
-        return;
     } else if (targetType is bir:BFiniteType) {
         generateCheckCastToFiniteType(mv, sourceType, targetType);
         return;
diff --git a/compiler/ballerina-backend-jvm/src/main/ballerina/compiler_backend_jvm/jvm_constants.bal b/compiler/ballerina-backend-jvm/src/main/ballerina/compiler_backend_jvm/jvm_constants.bal
index 3fe680f..4817175 100644
--- a/compiler/ballerina-backend-jvm/src/main/ballerina/compiler_backend_jvm/jvm_constants.bal
+++ b/compiler/ballerina-backend-jvm/src/main/ballerina/compiler_backend_jvm/jvm_constants.bal
@@ -246,6 +246,7 @@ const string WD_CHANNELS = "org/ballerinalang/jvm/WDChannels";
 const string WORKER_DATA_CHANNEL = "org/ballerinalang/jvm/WorkerDataChannel";
 const string CHANNEL_DETAILS = "org/ballerinalang/jvm/values/ChannelDetails";
 const string WORKER_UTILS = "org/ballerinalang/jvm/WorkerUtils";
+const string LONG_STREAM = "java/util/stream/LongStream";
 
 // types related classes
 const string BTYPE = "org/ballerinalang/jvm/types/BType";
diff --git a/compiler/ballerina-backend-jvm/src/main/ballerina/compiler_backend_jvm/jvm_instruction_gen.bal b/compiler/ballerina-backend-jvm/src/main/ballerina/compiler_backend_jvm/jvm_instruction_gen.bal
index 395ace0..601b54f 100644
--- a/compiler/ballerina-backend-jvm/src/main/ballerina/compiler_backend_jvm/jvm_instruction_gen.bal
+++ b/compiler/ballerina-backend-jvm/src/main/ballerina/compiler_backend_jvm/jvm_instruction_gen.bal
@@ -95,6 +95,10 @@ type InstructionGenerator object {
             self.generateRefEqualIns(binaryIns);
         } else if (binaryIns.kind == bir:BINARY_REF_NOT_EQUAL) {
             self.generateRefNotEqualIns(binaryIns);
+        } else if (binaryIns.kind == bir:BINARY_CLOSED_RANGE) {
+            self.generateClosedRangeIns(binaryIns);
+        } else if (binaryIns.kind == bir:BINARY_HALF_OPEN_RANGE) {
+            self.generateClosedRangeIns(binaryIns);
         } else {
             error err = error("JVM generation is not supported for type : " + io:sprintf("%s", binaryIns.kind));
             panic err;
@@ -307,6 +311,16 @@ type InstructionGenerator object {
         self.storeToVar(binaryIns.lhsOp.variableDcl);
     }
 
+    function generateClosedRangeIns(bir:BinaryOp binaryIns) {
+        self.mv.visitTypeInsn(NEW, ARRAY_VALUE);
+        self.mv.visitInsn(DUP);
+        self.generateBinaryRhsAndLhsLoad(binaryIns);
+        self.mv.visitMethodInsn(INVOKESTATIC, LONG_STREAM, "rangeClosed", io:sprintf("(JJ)L%s;", LONG_STREAM), true);
+        self.mv.visitMethodInsn(INVOKEINTERFACE, LONG_STREAM, "toArray", "()[J", true);
+        self.mv.visitMethodInsn(INVOKESPECIAL, ARRAY_VALUE, "<init>", "([J)V", false);
+        self.storeToVar(binaryIns.lhsOp.variableDcl);
+    }
+
     function generateAddIns(bir:BinaryOp binaryIns) {
         bir:BType bType = binaryIns.lhsOp.typeValue;
         if (bType is bir:BTypeInt || bType is bir:BTypeByte) {
@@ -689,10 +703,16 @@ type InstructionGenerator object {
         } else if (bType is bir:BXMLType) {
             self.mv.visitMethodInsn(INVOKEVIRTUAL, ARRAY_VALUE, "getRefValue", io:sprintf("(J)L%s;", OBJECT), false);
             self.mv.visitTypeInsn(CHECKCAST, XML_VALUE);
+        } else if (bType is bir:BErrorType) {
+            self.mv.visitMethodInsn(INVOKEVIRTUAL, ARRAY_VALUE, "getRefValue", io:sprintf("(J)L%s;", OBJECT), false);
+            self.mv.visitTypeInsn(CHECKCAST, ERROR_VALUE);
         } else {
             self.mv.visitMethodInsn(INVOKEVIRTUAL, ARRAY_VALUE, "getRefValue", io:sprintf("(J)L%s;", OBJECT), false);
+            if (!(bType is bir:BTypeAny)) {
+                string targetTypeClass = getTargetClass(varRefType, bType);
+                self.mv.visitTypeInsn(CHECKCAST, targetTypeClass);
+            }
         }
-
         self.storeToVar(inst.lhsOp.variableDcl);
     }
 
diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java
index a5cc152..a23ead9 100644
--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java
+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java
@@ -150,7 +150,6 @@ import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.stream.Collectors;
-
 import javax.xml.XMLConstants;
 
 /**
@@ -1533,6 +1532,10 @@ public class BIRGen extends BLangNodeVisitor {
                 return InstructionKind.REF_EQUAL;
             case REF_NOT_EQUAL:
                 return InstructionKind.REF_NOT_EQUAL;
+            case CLOSED_RANGE:
+                return InstructionKind.CLOSED_RANGE;
+            case HALF_OPEN_RANGE:
+                return InstructionKind.HALF_OPEN_RANGE;
             default:
                 throw new IllegalStateException("unsupported binary operation: " + opKind.value());
         }
diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/InstructionKind.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/InstructionKind.java
index d27f9a1..9a9decb 100644
--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/InstructionKind.java
+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/InstructionKind.java
@@ -87,6 +87,8 @@ public enum InstructionKind {
     OR((byte) 73),
     REF_EQUAL((byte) 74),
     REF_NOT_EQUAL((byte) 75),
+    CLOSED_RANGE((byte) 76),
+    HALF_OPEN_RANGE((byte) 77),
 
     // Unary expression related instructions.
     TYPEOF((byte) 80),
diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java
index eff8448..580e06e 100644
--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java
+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java
@@ -317,8 +317,8 @@ public class BIRInstructionWriter extends BIRVisitor {
     }
 
     public void visit(BIRNonTerminator.IsLike birIsLike) {
-        buf.writeByte(birIsLike.kind.getValue());
         writePosition(birIsLike.pos);
+        buf.writeByte(birIsLike.kind.getValue());
         typeWriter.visitType(birIsLike.type);
         birIsLike.lhsOp.accept(this);
         birIsLike.rhsOp.accept(this);
diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java
index 80c365a..70492b3 100644
--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java
+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java
@@ -631,9 +631,12 @@ public class Desugar extends BLangNodeVisitor {
         }
 
         // Return if this assignment is not a safe assignment
-        varNode.expr = rewriteExpr(varNode.expr);
+        BLangExpression bLangExpression = rewriteExpr(varNode.expr);
+        if (bLangExpression != null) {
+            bLangExpression = addConversionExprIfRequired(bLangExpression, varNode.type);
+        }
+        varNode.expr = bLangExpression;
         result = varNode;
-
     }
 
     @Override
@@ -4124,6 +4127,10 @@ public class Desugar extends BLangNodeVisitor {
             return expr;
         }
 
+        if (lhsType.tag == TypeTags.ARRAY && rhsType.tag == TypeTags.TUPLE) {
+            return expr;
+        }
+
         BOperatorSymbol conversionSymbol;
         if (types.isValueType(lhsType)) {
             conversionSymbol = Symbols.createUnboxValueTypeOpSymbol(rhsType, lhsType);
