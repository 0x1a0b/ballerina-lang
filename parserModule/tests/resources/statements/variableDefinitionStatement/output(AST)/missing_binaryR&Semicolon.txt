function foo(){
int a = x +
}

Output:
 ERROR [sachini/parserModule] - no expression found
 ERROR [sachini/parserModule] - Expected SEMICOLON;found RBRACE

{
    nodeKind: "package",
    tokenList: [{
        tokenType: 9,
        text: "EOF",
        startPos: 1,
        endPos: 1,
        lineNumber: 3,
        index: 12,
        whiteSpace: null
    }],
    definitionList: [{
        nodeKind: "function",
        tokenList: [{
            tokenType: 15,
            text: "function",
            startPos: 1,
            endPos: 8,
            lineNumber: 1,
            index: 1,
            whiteSpace: null
        }],
        fnSignature: {
            nodeKind: "functionSignatureNode",
            tokenList: [{
                tokenType: 2,
                text: "(",
                startPos: 13,
                endPos: 13,
                lineNumber: 1,
                index: 3,
                whiteSpace: null
            }, {
                tokenType: 3,
                text: ")",
                startPos: 14,
                endPos: 14,
                lineNumber: 1,
                index: 4,
                whiteSpace: null
            }],
            functionIdentifier: {
                nodeKind: "identifier",
                tokenList: [{
                    tokenType: 7,
                    text: "foo",
                    startPos: 10,
                    endPos: 12,
                    lineNumber: 1,
                    index: 2,
                    whiteSpace: "space "
                }],
                identifier: "foo"
            }
        },
        blockNode: {
            nodeKind: "blockNode",
            tokenList: [{
                tokenType: 0,
                text: "{",
                startPos: 15,
                endPos: 15,
                lineNumber: 1,
                index: 5,
                whiteSpace: null
            }, {
                tokenType: 1,
                text: "}",
                startPos: 1,
                endPos: 1,
                lineNumber: 3,
                index: 11,
                whiteSpace: "newLine "
            }],
            statementList: [{
                nodeKind: "errorNode",
                errorStatement: {
                    nodeKind: "variableDefinitionStatement",
                    tokenList: [{
                        tokenType: 16,
                        text: "int",
                        startPos: 1,
                        endPos: 3,
                        lineNumber: 2,
                        index: 6,
                        whiteSpace: "newLine "
                    }, {
                        tokenType: 5,
                        text: "=",
                        startPos: 7,
                        endPos: 7,
                        lineNumber: 2,
                        index: 8,
                        whiteSpace: "space "
                    }, {
                        tokenType: 23,
                        text: "<missing SEMICOLON>",
                        startPos: -1,
                        endPos: -1,
                        lineNumber: 0,
                        index: -1,
                        whiteSpace: ""
                    }],
                    valueKind: "int",
                    varIdentifier: {
                        nodeKind: "variableReferenceIdentifier",
                        tokenList: [{
                            tokenType: 7,
                            text: "a",
                            startPos: 5,
                            endPos: 5,
                            lineNumber: 2,
                            index: 7,
                            whiteSpace: "space "
                        }],
                        varIdentifier: "a"
                    },
                    expression: {
                        nodeKind: "binaryExpression",
                        tokenList: [{
                            tokenType: 4,
                            text: "+",
                            startPos: 11,
                            endPos: 11,
                            lineNumber: 2,
                            index: 10,
                            whiteSpace: "space "
                        }],
                        operatorKind: "+",
                        leftExpr: {
                            nodeKind: "variableReferenceIdentifier",
                            tokenList: [{
                                tokenType: 7,
                                text: "x",
                                startPos: 9,
                                endPos: 9,
                                lineNumber: 2,
                                index: 9,
                                whiteSpace: "space "
                            }],
                            varIdentifier: "x"
                        },
                        rightExpr: null
                    }
                }
            }]
        }
    }]
}
