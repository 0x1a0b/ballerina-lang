/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply plugin: "base"


description = 'Ballerina - Examples Test'

import org.apache.tools.ant.taskdefs.condition.Os
import groovy.json.JsonSlurper


configurations {
    ballerinaTools
}

dependencies {
    ballerinaTools project(path: ':jballerina-tools', configuration: 'unzipped')
}

task copyDistribution() {
    dependsOn ":jballerina-tools:build"
    doFirst {
        copy {
            from file(configurations.ballerinaTools.asPath)
            into "$buildDir/extractedDistribution"
        }
    }
}
def distPath = "$buildDir/extractedDistribution"
def bbeList = []

def IgnoreList = [
        'proto-to-ballerina',
        'swagger-to-ballerina',
        'taint-checking',
        'websub-hub-client-sample',
        'websub-remote-hub-sample',
        'config-api',
        'testerina-function-mocks',
        'jdbc-client-crud-operations',
        'jdbc-client-batch-update',
        'jdbc-client-call-procedures',
        'streaming-big-dataset',
        'docker-deployment',
        'kubernetes-deployment',
        'awslambda-deployment',
        'openshift-deployment',
        'grpc-server-streaming',
        'transactions-distributed',
        'local-transactions',
        'local-transactions-with-participants',
        'xa-transactions',
        'secured-client-with-oauth2',
        'gauge-metrics',
        'counter-metrics',
        'xml-functions',
        'openapi-to-ballerina',
        'kafka_message_consumer_group_service',
        'kafka_message_consumer_simple',
        'kafka_message_consumer_service',
        'kafka_message_producer',
        'kafka_message_producer_transactional',
        'grpc-secured-unary',
        'grpc-bidirectional-streaming',
        'grpc-client-streaming',
        'grpc-unary-non-blocking',
        'grpc-unary-blocking',
        'nats-streaming-start-position',
        'nats-streaming-queue-group',
        'nats-streaming-durable-subscriptions',
        'nats-streaming-consumer-with-data-binding',
        'nats-streaming-client',
        'nats-basic-client',
        'jdbc-streaming-big-dataset',
        'testerina-guarantee-test-execution-order',
        'testerina-data-driven-tests',
        'testerina-before-and-after-suite',
        'testerina-before-each-test',
        'testerina-before-and-after-test',
        'testerina-assertions',
        'taint-checking',
        'websocket-chat-application',
        'secured-service-with-basic-auth',
        'secured-service-with-jwt',
        'http-caching-client',
        'response-with-multiparts',
        'http-data-binding',
        'http-1.1-to-2.0-protocol-switch',
        'websocket-basic-sample',
        'http-to-websocket-upgrade',
        'websocket-proxy-server',
        'http-redirects',
        'tracing',
        'secured-client-with-basic-auth',
        'secured-client-with-jwt-auth',
        'http-2.0-server-push',
        'worker-interaction',
        'workers',
        'fork-variable-access',
        'fork',
        'hello-world-parallel',
        'the-main-function',
        'task-scheduler-appointment',
        'task-scheduler-timer',
        'checkpanic',
        'type-cast',
        'async',
        'panic',
        'time',
        'log-api',
        'crypto',
        'http-client-endpoint',
        'type-conversion',
        'record-io',
        'xml-literal',
]

def MockList = [
        'filepath',
        'strings',
        'math-functions',
        'cache',
        'user-defined-error',
        'trap',
        'check',
        'error-handling',
        'error-destructure-binding-pattern',
        'record-destructure-binding-pattern',
        'tuple-destructure-binding-pattern',
        'error-typed-binding-pattern',
        'record-typed-binding-pattern',
        'tuple-typed-binding-pattern',
        'xml-access',
        'xml-namespaces',
        'xml-attributes',
        'xml',
        'json-to-xml-conversion',
        'json-record-map-conversion',
        'json-access',
        'json-arrays',
        'json-objects',
        'json',
        'immutable-values',
        'clone',
        'optional-field-access',
        'length',
        'equality',
        'compound-assignment-operators',
        'object-type-reference',
        'anonymous-objects',
        'abstract-objects',
        'object-assignability',
        'object-methods',
        'objects',
        'record-type-reference',
        'record-optional-fields',
        'anonymous-records',
        'records',
        'string-template',
        'range-expressions',
        'constants',
        'any-type',
        'anydata-type',
        'optional-type',
        'byte-type',
        'union-type',
        'table',
        'maps',
        'tuple-type',
        'arrays',
        'values',
        'elvis-operator',
        'type-guard',
        'type-test-expression',
        'error-match-statement',
        'record-match-statement',
        'tuple-match-statement',
        'match',
        'foreach',
        'while',
        'if-else',
        'functional-iteration',
        'closures',
        'anonymous-functions',
        'function-pointers',
        'quoted-identifiers',
        'functions-with-rest-parameter',
        'functions-with-defaultable-parameters',
        'functions-with-required-parameters',
        'functions',
        'var',
        'variables',
        'modules',
        'hello-world-client',
        'hello-world'
]


task createProject {
    dependsOn copyDistribution
    doFirst {
        exec {
            //Initialize Ballerina project
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                //TODO: Need to verify with windows
                workingDir "${buildDir}/"
                commandLine 'cmd', '/c', "${distPath}/bin/ballerina.bat", 'new', 'TestProject'
            } else {
                workingDir "${buildDir}/"
                commandLine "${distPath}/bin/./ballerina", 'new', 'TestProject'
            }
        }
    }
    doFirst {
        def inputFile = new File("${distPath}/examples/index.json")
        def categories = new JsonSlurper().parseText(inputFile.text)
        categories.each { category ->
            def examples = category.samples
            examples.each { example ->
                bbeList.push("$example.url")
            }
        }
    }
    doLast {
        bbeList.each { String bbe ->
            def src = "${project.rootDir}/examples/${bbe}"
            def dis = "${buildDir}/TestProject/src/${bbe}_test/"
            copy {
                from(src) {}
                into dis
            }
        }
    }
}

task TestWithTool {
    dependsOn createProject
    doFirst {
        MockList.each { String bbe ->
            def balname = bbe
            bbe = "${bbe}_test"
            def outputarry = []
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                //TODO: Need to verify with windows
                exec {
                    workingDir "${buildDir}/TestProject"
                    commandLine 'cmd', '/c', "${distPath}/bin/ballerina.bat", 'build', '--skip-tests', '--experimental', bbe
                }
            } else {
                exec {
                    workingDir "${buildDir}/TestProject"
                    commandLine "${distPath}/bin/./ballerina", 'build', '--skip-tests', '--experimental', bbe
                }
            }
            new ByteArrayOutputStream().withStream { os ->
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    //TODO: Need to verify with windows
                    exec {
                        workingDir "${buildDir}/TestProject/target/bin"
                        commandLine 'cmd', '/c', "${distPath}/bin/ballerina.bat", 'run', "${bbe}.jar"
                        standardOutput = os
                    }
                } else {
                    exec {
                        workingDir "${buildDir}/TestProject/target/bin"
                        commandLine "${distPath}/bin/./ballerina", 'run', "${bbe}.jar"
                        standardOutput = os
                    }
                }
                outputarry.add(os.toString())
                println outputarry[0]
            }
            def lines = "${outputarry[0]}".split('\n')
            def variable = bbe - "_test"
            variable = variable.replace('-', '_')
            File file = file("${buildDir}/TestProject/src/${bbe}/${variable}.out")
            def fileout = []
            file.readLines().each {
                def str2 = it.toString()
                str2 = str2.trim()
                if (str2?.trim()) {
                    if (str2[0] != '#') {
                        fileout.add(str2)
                    }
                }
            }
            def newlines = []
            for (int i = 0; i < lines.size(); i++) {
                def str1 = lines[i].toString()
                str1 = str1.trim()
                if (str1?.trim()) {
                    newlines.add(str1)
                }
            }
            def index = fileout.findIndexOf { it == newlines[0] }
            if (index == -1) {
                throw new GradleException("Ballerina example test failed : ${balname}")
            }
            for (int i = 0; i < newlines.size(); i++) {
                if (newlines[i] != fileout[index + i]) {
                    println newlines[i]
                    println fileout[index + i]
                    throw new GradleException("Ballerina example test failed : ${balname}")
                }
            }
        }
    }
}


task TestWithoutTool {
    dependsOn createProject
    doLast {
        def ListOfItem = IgnoreList + MockList
        ListOfItem.each { String elements ->
            bbeList.remove("$elements")
        }
        bbeList.each { String bbe ->
            bbe = "${bbe}_test"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                //TODO: Need to verify with windows
                exec {
                    workingDir "${buildDir}/TestProject"
                    commandLine 'cmd', '/c', "${distPath}/bin/ballerina.bat", 'build', '--experimental', "${bbe}"
                }
            } else {
                exec {
                    workingDir "${buildDir}/TestProject"
                    commandLine "${buildDir}/extractedDistribution/bin/./ballerina", 'build', '--experimental', "${bbe}"
                }
            }
        }
    }
}

task test {
    dependsOn createProject

    mustRunAfter ':jballerina-integration-test:test'
    outputs.dir("${distPath}/examples/target")
    outputs.dir("${distPath}/examples/.ballerina/repo/")
    outputs.cacheIf { true }

    PatternSet patternSet = new PatternSet();
    patternSet.exclude("**/.ballerina/**");
    patternSet.exclude("**/Ballerina.toml");
    patternSet.exclude("**/Ballerina.lock");
    patternSet.exclude("**/ballerina-internal.log")
    inputs.files(files("${distPath}/examples").asFileTree.matching(patternSet))
}

build {
    dependsOn test
}

test.finalizedBy TestWithoutTool
test.finalizedBy TestWithTool
